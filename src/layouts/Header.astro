---
import { Image } from "astro:assets";
import Logo from "../assets/logo.png";
import { AlignRightIcon, XIcon } from "@lucide/astro";

const navigation = [
  { name: "Home", href: "/" },
  { name: "Members", href: "/members" },
  { name: "Albums", href: "/albums" },
  { name: "Projects", href: "/projects" },
  { name: "Schedule", href: "/schedule" },
  { name: "Lecturers", href: "/lecturers" },
  { name: "Notion", href: "/notion" },
];
const pathname = Astro.url.pathname;
---

<header data-header class="fixed inset-x-0 top-0 z-50">
  <span
    data-header-bg
    class="absolute w-full bottom-16 lg:bottom-20 lg:h-20 h-16 inset-x-0 bg-bg lg:bg-bg/60 lg:backdrop-blur-2xl -z-1 ease-in-out transition-all duration-300 delay-0"
  ></span>
  <div class="container flex h-16 lg:h-20 items-center justify-between">
    <a href="/" class="flex items-center gap-2">
      <Image src={Logo} alt="Logo" class="h-12 lg:h-16 w-auto p-2" />
    </a>

    <nav
      data-nav-menu
      class="fixed top-16 lg:static bg-bg lg:bg-transparent delay-300 ease-in-out -right-full bottom-0 w-full lg:w-auto transition-all duration-500 flex flex-col lg:flex-row items-center gap-6 lg:gap-0 py-12 lg:py-0 text-right lg:text-left"
    >
      {
        navigation.map((item) => (
          <a
            href={item.href}
            class={`font-semibold transition-colors ${
              (
                item.href == "/"
                  ? pathname === item.href
                  : pathname.startsWith(item.href)
              )
                ? "text-primary"
                : "text-white"
            } hover:text-primary block lg:inline-block w-full lg:w-auto px-6 lg:px-4`}
          >
            {item.name}
          </a>
        ))
      }
    </nav>

    <button
      data-toggle-menu
      class="lg:hidden h-10 w-10 relative flex items-center justify-center"
    >
      <AlignRightIcon
        data-menu-icon
        class="absolute top-1/2 left-1/2 -translate-1/2 opacity-100 rotate-0 transition-all duration-300 ease-in-out"
      />
      <XIcon
        data-close-icon
        class="absolute top-1/2 left-1/2 -translate-1/2 opacity-0 rotate-180 transition-all duration-300 ease-in-out"
      />
    </button>
  </div>
</header>
<script>
  document.addEventListener("astro:page-load", () => {
    const headerBg = document.querySelector("[data-header-bg]")! as HTMLElement;
    const navMenu = document.querySelector("[data-nav-menu]")! as HTMLElement;
    const toggleMenu = document.querySelector(
      "[data-toggle-menu]",
    )! as HTMLButtonElement;

    const menuIcon = document.querySelector("[data-menu-icon]")! as SVGElement;
    const closeIcon = document.querySelector(
      "[data-close-icon]",
    )! as SVGElement;

    const isScrolled = () => window.scrollY > headerBg.clientHeight - 16;

    const isOpen = () => navMenu.classList.contains("right-0");

    const updateHeaderBg = () => {
      if (isScrolled() || isOpen()) {
        headerBg.classList.remove("bottom-16", "lg:bottom-20", "delay-500");
        headerBg.classList.add("bottom-0", "lg:bottom-0", "delay-0");
      } else {
        headerBg.classList.remove("bottom-0", "lg:bottom-0", "delay-0");
        headerBg.classList.add("bottom-16", "lg:bottom-20", "delay-500");
      }
    };

    window.addEventListener("scroll", updateHeaderBg);

    const showNavMenu = () => {
      navMenu.classList.remove("-right-full", "delay-0");
      navMenu.classList.add("right-0", "delay-300");

      menuIcon.classList.remove("opacity-100", "rotate-0");
      menuIcon.classList.add("opacity-0", "rotate-180");
      closeIcon.classList.remove("opacity-0", "-rotate-180");
      closeIcon.classList.add("opacity-100", "rotate-0");

      updateHeaderBg();
    };
    const hideNavMenu = () => {
      navMenu.classList.remove("right-0", "delay-300");
      navMenu.classList.add("-right-full", "delay-0");

      menuIcon.classList.remove("opacity-0", "rotate-180");
      menuIcon.classList.add("opacity-100", "rotate-0");
      closeIcon.classList.remove("opacity-100", "rotate-0");
      closeIcon.classList.add("opacity-0", "-rotate-180");

      updateHeaderBg();
    };

    const toggleMenuHandler = () => {
      if (isOpen()) {
        hideNavMenu();
      } else {
        showNavMenu();
      }
    };

    toggleMenu.addEventListener("click", toggleMenuHandler);
    document.addEventListener("astro:before-preparation", () => {
      if (isOpen()) {
        hideNavMenu();
      }
    });
  });
</script>
